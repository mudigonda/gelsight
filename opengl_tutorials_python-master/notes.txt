Tutorial 1 notes
----------------
1. download glfw for python
2. download glfw libraries
	*- https://github.com/FlorianRhiem/pyGLFW  is the version used:  (https://pypi.python.org/pypi/pyglfw/0.1.0)
	- https://github.com/pyglfw/pyglfw   is another version w/ better documentation but the Florian one 
	  above does a nicer job of wrapping functionality.
3. original tuts call for glew, pyopengl seems to include ARB extensions as standard. 
	a.  [] Research this a bit, does pyopengl expose glew.  Review pyopengl source.
	b.  [] figure out how to query for ARB extension existence in pyopengl.  (Maybe http://pyopengl.sourceforge.net/pydoc/OpenGL.extensions.html\
4.  Installation
    1. pip3.4.exe install PyOpenGL PyOpenGL_accelerate
    2. pip3.4.exe install Pillow
    3. download https://github.com/FlorianRhiem/pyGLFW,  python setup.py install
        a. Use the one included with this 
5. Include link to PyOpenGL performance document: http://pyopengl.sourceforge.net/documentation/opengl_diffs.html
    * This page does a nice job of summarzing speedup/debugging tradeoffs
    * **NOTE: The section `Extensions and Conditional Functionality` is effectively GLEW minus the 
    profile specific querying.

Tutorial 2 notes:
1.  !!!!! If you mix tabs and spaces the usual indentation error gets silently squelched by 
    what I assume is OpenGL. It's not entirely clear why the error goes missing.
2.  [] Create a custom tutorial describing the differences between VAO's, VBO's, and so on.
	- http://www.opengl.org/wiki/Tutorial2:_VAOs,_VBOs,_Vertex_and_Fragment_Shaders_(C_/_SDL)
	- http://www.arcsynthesis.org/gltut/Positioning/Tutorial%2005.html
	- http://antongerdelan.net/opengl/vertexbuffers.html *
	- *This tutorial lead to vao_test.py which properly uses the 
3.  Note the creation of a glew standin (used by tuts 1 and 2)
    * See http://pyopengl.sourceforge.net/documentation/opengl_diffs.html and consider scrapping the GLEW
    lookup or simply wrapping PyOpenGL's native behaviour.

Tutorial 3 notes:
1.  Created a replacement for glm (not yet complete.)
	- Python operator overload http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
	- glm source (headers only, easy to read): https://github.com/g-truc/glm
2.  glm matrices are defined in terms of columns, copy their source directly.
3.  Matrix math with glm works differently because matrices are applied from right to left
	- e.g. MatrixA * MatrixB * V results is MatrixB * V = V` then MatrixA * V` = V``

Tutorial 4 Notes:
1.  Added key event for 'D' to enable/disable depth to allow the user to see the effects
	depth testing
2.  Realized I wasn't clearing data.  Added that to Tuts 2-4 (Tut1 doesn't allocate anything.)

Tutorial 5 Notes:
1.  Note for the user that there are several image processing libraries.  Some better than others.  :)
2.  Use Pillow (PIL fork) to load images
3.  Research why glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR) is necessary for
    displaying our image.  I'm assuming it's an issue with mipmapping but who knows.
4.  Dig in to mipmapping, see if there is a way to generate your own mipmapped texturing using Pillow
    operations
        - http://gregs-blog.com/2008/01/17/opengl-texture-filter-parameters-explained/
5.  Rename `bind_texture` modes to something resembling useful.

Tutorial 6 notes:
1.  Seriously review Sin/Cos and how they relate to spherical coordinates
2.  Added a common.disable_vsyc() method.  Calling this will stabilize mouse look,
otherwise it gets all jittery (will need to be fixed in later tuts.)

Tutorial 7 notes:
1.  OBJ loader created.  Some functionality is lacking and the loader requires normals and uvs
or it gets all stupid
2.  Don't go too far making the obj loader work.  It just needs to function w/ the given content.
Let the user handle the rest.

Tutorial 9 notes:
1. Added texture.py to handle various texture/image related functionality.  Review original C++ tuts
to figure out when those authors move texture functions to a dedicated file.
2. Added vboindexer.py with some additional, possibly confusing, code for mimicing
C++'s std::map::find behaviour.  Python's default dict is unordered so the original vboindexer.cpp
had to be modified to do an equality, not a greater than, memory block comparison.  This requires loading
the "c" library.  This probably isn't worth explaining in the Python tuts.

Byte Sizes:
-----------
Byte lengths are hardcoded right now 

e.g. glBufferData(GL_ARRAY_BUFFER, len(data) * 4 * 3, indexed_normals, GL_STATIC_DRAW)

Here, (len(data) * 4 * 3) = number of objects * 4 bytes per float * 3 floats per objects.  

ctypes.sizeof is one possible solution for automate byte-size detection.

Relative imports (unit tests)
------------------------------
- Unit tests are inline w/ the module they are testing.  This was supposed to keep the primary source
directory clean of faff but I didn't realize that relative imports are not directly supported when 
scripts are run inside module folders (https://mail.python.org/pipermail/python-3000/2007-April/006793.html)

To run them either use `nosetests` (https://nose.readthedocs.org/en/latest/) inside the mod folder or call 
the tests directly w/ `python -m csgl.test_example`

Better explanation: http://stackoverflow.com/questions/72852/how-to-do-relative-imports-in-python
